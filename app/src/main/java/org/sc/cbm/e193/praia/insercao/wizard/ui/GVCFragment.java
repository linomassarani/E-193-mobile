package org.sc.cbm.e193.praia.insercao.wizard.ui;

import android.app.Activity;
import android.content.Intent;
import android.database.DataSetObserver;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.view.Gravity;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;

import com.melnykov.fab.FloatingActionButton;

import org.sc.cbm.e193.R;
import org.sc.cbm.e193.praia.DbAdapter.GVCsDbAdapter;
import org.sc.cbm.e193.praia.DbAdapter.GVMsDbAdapter;
import org.sc.cbm.e193.praia.insercao.GVCListViewCursorAdaptorActivity;
import org.sc.cbm.e193.praia.insercao.GVMListViewCursorAdaptorActivity;
import org.sc.cbm.e193.praia.insercao.wizard.model.GVCPage;
import org.sc.cbm.e193.praia.insercao.wizard.model.GVMPage;
import org.sc.cbm.e193.praia.pojo.GVC;
import org.sc.cbm.e193.praia.pojo.GVCAdapter;
import org.sc.cbm.e193.praia.pojo.GVM;
import org.sc.cbm.e193.praia.pojo.GVMAdapter;
import org.sc.cbm.e193.tools.Tools;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class GVCFragment extends Fragment {
    public static final int UNDO_HEIGHT = 60;
    private static final String ARG_KEY = "key";
    private static final int UNDO_TIME = 5000;
    private PageFragmentCallbacks mCallbacks;
    private String mKey;
    private GVCPage mPage;
    private ArrayAdapter<GVC> mGVCAdapter;
    private ArrayList<GVC> mGVCList;
    private ListView mGVCView;
    private FloatingActionButton mFabView;
    private GVCsDbAdapter dbHelper;
    private LinearLayout mUndoView; //TODO EXTRACT CLASS OR USE com.github.jenzz.undobar:library:1.3:api15Release@aar
    private Runnable mUnduVisibilityToGoneThread;
    private GVC mGVCRemoved;

    public GVCFragment() {
    }

    public static GVCFragment create(String key) {
        Bundle args = new Bundle();
        args.putString(ARG_KEY, key);

        GVCFragment fragment = new GVCFragment();
        fragment.setArguments(args);

        return fragment;

    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        Bundle args = getArguments();
        mKey = args.getString(ARG_KEY);
        mPage = (GVCPage) mCallbacks.onGetPage(mKey);

        mGVCList = new ArrayList<GVC>();

        dbHelper = new GVCsDbAdapter(getActivity());
        dbHelper.open();

        mUnduVisibilityToGoneThread = new Runnable() {
            @Override
            public void run() {
                makeUndoDesappear(getView());
            }
        };
    }

    /*
     *   Beyond the common routines, does the refill job when user comes back to this fragment for
     *   review or correction of any data
     */
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_praia_insercao_wizard_page_gvm, container, false);
        ((TextView) rootView.findViewById(android.R.id.title)).setText(mPage.getTitle());

        mGVCAdapter = new GVCAdapter(getActivity(), mGVCList);
        mGVCView = (ListView) rootView.findViewById(R.id.list_gvm_added);
        mGVCView.setAdapter(mGVCAdapter);

        mFabView = (FloatingActionButton) rootView.findViewById(R.id.fab);
        mFabView.attachToListView(mGVCView);

        mUndoView = (LinearLayout) rootView.findViewById(R.id.undo);

        String sGVCList = mPage.getData().getString(GVCPage.GVC_LIST_DATA_KEY);
        if (sGVCList != null) {
            loadGVCList(sGVCList);
        }

        return rootView;
    }

    /**
     * Loads GVCList using string generated by getGVCListRegString
     *
     * @param sGVCList string generated by getGVCListRegString
     */
    private void loadGVCList(String sGVCList) {
        List<String> GVCsReg = Arrays.asList(sGVCList.split("\\s*,\\s*"));

        for (String cpf : GVCsReg)
            mGVCList.add(dbHelper.fetchGVCByCPF(cpf));

        mGVCAdapter.notifyDataSetChanged();
    }

    @Override
    public void onAttach(Activity activity) {
        super.onAttach(activity);

        if (!(activity instanceof PageFragmentCallbacks)) {
            throw new ClassCastException("Activity must implement PageFragmentCallbacks");
        }

        mCallbacks = (PageFragmentCallbacks) activity;
    }

    @Override
    public void onDetach() {
        super.onDetach();
        mCallbacks = null;
    }

    /*
     *   Adds informations to the final data's list while the user is filling the fields
     */
    @Override
    public void onViewCreated(View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        mFabView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent(getActivity(), GVCListViewCursorAdaptorActivity.class);
                startActivityForResult(intent, 1);
            }
        });

        mGVCView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                mGVCRemoved = mGVCList.get(position);
                mGVCList.remove(position);

                makeUndoAppears(view);

                mGVCAdapter.notifyDataSetChanged();
            }
        });

        mGVCAdapter.registerDataSetObserver(new DataSetObserver() {
            @Override
            public void onChanged() {
                super.onChanged();
                Bundle bundle = mPage.getData();
                String gvcComaSeparated = getGVCListRegString();
                bundle.putString(GVCPage.GVC_LIST_DATA_KEY, gvcComaSeparated);
                mPage.notifyDataChanged();
            }
        });

        mUndoView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                addToGVCList(mGVCRemoved);
                mUndoView.removeCallbacks(mUnduVisibilityToGoneThread);
                makeUndoDesappear(v);

                mGVCAdapter.notifyDataSetChanged();
            }
        });
    }

    private void addToGVCList(GVC gvc) {
        for (GVC item : mGVCList) {
            if (item.getCpf().matches(gvc.getCpf()))
                return;
        }

        mGVCList.add(gvc);
        mGVCAdapter.notifyDataSetChanged();
    }

    private void makeUndoDesappear(View view) {
        mUndoView.setVisibility(View.GONE);

        FrameLayout.LayoutParams lp =
                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                        FrameLayout.LayoutParams.MATCH_PARENT);
        int margin = Tools.dpToPx(16, view.getContext());
        lp.setMargins(margin, margin, margin, margin);
        lp.gravity = Gravity.BOTTOM | Gravity.RIGHT;
        mFabView.setLayoutParams(lp);

        FrameLayout.LayoutParams lpListView =
                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                        FrameLayout.LayoutParams.MATCH_PARENT);
        lpListView.setMargins(0, 70, 0, 0);
        mGVCView.setLayoutParams(lpListView);
    }

    private void makeUndoAppears(View view) {
        FrameLayout.LayoutParams lpFab =
                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                        FrameLayout.LayoutParams.MATCH_PARENT);
        int margin = Tools.dpToPx(16, view.getContext());
        lpFab.setMargins(margin, margin, margin, margin + Tools.dpToPx(UNDO_HEIGHT, view.getContext()));
        lpFab.gravity = Gravity.BOTTOM | Gravity.RIGHT;
        mFabView.setLayoutParams(lpFab);

        FrameLayout.LayoutParams lpListView =
                new FrameLayout.LayoutParams(FrameLayout.LayoutParams.MATCH_PARENT,
                        FrameLayout.LayoutParams.MATCH_PARENT);
        lpListView.setMargins(0, 70, 0, Tools.dpToPx(UNDO_HEIGHT, view.getContext()));
        mGVCView.setLayoutParams(lpListView);

        mUndoView.removeCallbacks(mUnduVisibilityToGoneThread);
        mUndoView.postDelayed(mUnduVisibilityToGoneThread, UNDO_TIME);
        mUndoView.setVisibility(View.VISIBLE);
    }

    /**
     * Get gvc's registrations string from list
     *
     * @return ex: "03030303030-2, 03030303032-2, 03030303031-2", without quotes <br> if list is empty
     */
    private String getGVCListRegString() {
        String gvcLisTCpf = new String();

        if (mGVCList.size() == 0) {
            gvcLisTCpf = null;
        } else {
            for (int i = 0; i < mGVCList.size() - 1; i++) {
                gvcLisTCpf = gvcLisTCpf + mGVCList.get(i).getCpf() + ", ";
            }
            gvcLisTCpf = gvcLisTCpf + mGVCList.get(mGVCList.size() - 1).getCpf();

        }

        return gvcLisTCpf;
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == 1) {
            if (resultCode == getActivity().RESULT_OK) {
                GVC gvc = new GVC();
                gvc.setName(data.getStringExtra(GVCsDbAdapter.KEY_NAME));
                gvc.setCpf(data.getStringExtra(GVCsDbAdapter.KEY_CPF));

                addToGVCList(gvc);
            }
        }
    }

    @Override
    public void setMenuVisibility(boolean menuVisible) {
        super.setMenuVisibility(menuVisible);

        // In a future update to the support library, this should override setUserVisibleHint
        // instead of setMenuVisibility.
//        if (mNameView != null) {
//            InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(
//                    Context.INPUT_METHOD_SERVICE);
//            if (!menuVisible) {
//                imm.hideSoftInputFromWindow(getView().getWindowToken(), 0);
//            }
//        }
    }
}
